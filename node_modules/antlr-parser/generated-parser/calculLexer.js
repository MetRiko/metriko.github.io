// Generated from calcul.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');



var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0002\"\u00c8\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003",
    "\u000b\u0003\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0017",
    "\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u001a",
    "\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d",
    "\u0003\u001d\u0007\u001d\u0099\n\u001d\f\u001d\u000e\u001d\u009c\u000b",
    "\u001d\u0003\u001e\u0003\u001e\u0007\u001e\u00a0\n\u001e\f\u001e\u000e",
    "\u001e\u00a3\u000b\u001e\u0003\u001f\u0006\u001f\u00a6\n\u001f\r\u001f",
    "\u000e\u001f\u00a7\u0003 \u0006 \u00ab\n \r \u000e \u00ac\u0003 \u0003",
    " \u0007 \u00b1\n \f \u000e \u00b4\u000b \u0003 \u0003 \u0006 \u00b8",
    "\n \r \u000e \u00b9\u0005 \u00bc\n \u0003!\u0003!\u0003!\u0003!\u0007",
    "!\u00c2\n!\f!\u000e!\u00c5\u000b!\u0003!\u0003!\u0002\u0002\"\u0003",
    "\u0003\u0005\u0004\u0007\u0005\t\u0006\u000b\u0007\r\b\u000f\t\u0011",
    "\n\u0013\u000b\u0015\f\u0017\r\u0019\u000e\u001b\u000f\u001d\u0010\u001f",
    "\u0011!\u0012#\u0013%\u0014\'\u0015)\u0016+\u0017-\u0018/\u00191\u001a",
    "3\u001b5\u001c7\u001d9\u001e;\u001f= ?!A\"\u0003\u0002\b\u0003\u0002",
    "\f\f\u0005\u0002\u000b\f\u000f\u000f\"\"\u0005\u0002C\\aac|\u0006\u0002",
    "2;C\\aac|\u0003\u00022;\u0004\u0002\f\f\u000f\u000f\u0002\u00cf\u0002",
    "\u0003\u0003\u0002\u0002\u0002\u0002\u0005\u0003\u0002\u0002\u0002\u0002",
    "\u0007\u0003\u0002\u0002\u0002\u0002\t\u0003\u0002\u0002\u0002\u0002",
    "\u000b\u0003\u0002\u0002\u0002\u0002\r\u0003\u0002\u0002\u0002\u0002",
    "\u000f\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002\u0002\u0002",
    "\u0013\u0003\u0002\u0002\u0002\u0002\u0015\u0003\u0002\u0002\u0002\u0002",
    "\u0017\u0003\u0002\u0002\u0002\u0002\u0019\u0003\u0002\u0002\u0002\u0002",
    "\u001b\u0003\u0002\u0002\u0002\u0002\u001d\u0003\u0002\u0002\u0002\u0002",
    "\u001f\u0003\u0002\u0002\u0002\u0002!\u0003\u0002\u0002\u0002\u0002",
    "#\u0003\u0002\u0002\u0002\u0002%\u0003\u0002\u0002\u0002\u0002\'\u0003",
    "\u0002\u0002\u0002\u0002)\u0003\u0002\u0002\u0002\u0002+\u0003\u0002",
    "\u0002\u0002\u0002-\u0003\u0002\u0002\u0002\u0002/\u0003\u0002\u0002",
    "\u0002\u00021\u0003\u0002\u0002\u0002\u00023\u0003\u0002\u0002\u0002",
    "\u00025\u0003\u0002\u0002\u0002\u00027\u0003\u0002\u0002\u0002\u0002",
    "9\u0003\u0002\u0002\u0002\u0002;\u0003\u0002\u0002\u0002\u0002=\u0003",
    "\u0002\u0002\u0002\u0002?\u0003\u0002\u0002\u0002\u0002A\u0003\u0002",
    "\u0002\u0002\u0003C\u0003\u0002\u0002\u0002\u0005E\u0003\u0002\u0002",
    "\u0002\u0007I\u0003\u0002\u0002\u0002\tL\u0003\u0002\u0002\u0002\u000b",
    "Q\u0003\u0002\u0002\u0002\rV\u0003\u0002\u0002\u0002\u000f\\\u0003\u0002",
    "\u0002\u0002\u0011a\u0003\u0002\u0002\u0002\u0013c\u0003\u0002\u0002",
    "\u0002\u0015e\u0003\u0002\u0002\u0002\u0017g\u0003\u0002\u0002\u0002",
    "\u0019i\u0003\u0002\u0002\u0002\u001bl\u0003\u0002\u0002\u0002\u001d",
    "o\u0003\u0002\u0002\u0002\u001fq\u0003\u0002\u0002\u0002!s\u0003\u0002",
    "\u0002\u0002#v\u0003\u0002\u0002\u0002%y\u0003\u0002\u0002\u0002\'}",
    "\u0003\u0002\u0002\u0002)\u0080\u0003\u0002\u0002\u0002+\u0082\u0003",
    "\u0002\u0002\u0002-\u0084\u0003\u0002\u0002\u0002/\u0086\u0003\u0002",
    "\u0002\u00021\u0088\u0003\u0002\u0002\u00023\u008a\u0003\u0002\u0002",
    "\u00025\u008c\u0003\u0002\u0002\u00027\u0092\u0003\u0002\u0002\u0002",
    "9\u0096\u0003\u0002\u0002\u0002;\u009d\u0003\u0002\u0002\u0002=\u00a5",
    "\u0003\u0002\u0002\u0002?\u00bb\u0003\u0002\u0002\u0002A\u00bd\u0003",
    "\u0002\u0002\u0002CD\t\u0002\u0002\u0002D\u0004\u0003\u0002\u0002\u0002",
    "EF\t\u0003\u0002\u0002FG\u0003\u0002\u0002\u0002GH\b\u0003\u0002\u0002",
    "H\u0006\u0003\u0002\u0002\u0002IJ\u0007k\u0002\u0002JK\u0007h\u0002",
    "\u0002K\b\u0003\u0002\u0002\u0002LM\u0007v\u0002\u0002MN\u0007j\u0002",
    "\u0002NO\u0007g\u0002\u0002OP\u0007p\u0002\u0002P\n\u0003\u0002\u0002",
    "\u0002QR\u0007g\u0002\u0002RS\u0007n\u0002\u0002ST\u0007u\u0002\u0002",
    "TU\u0007g\u0002\u0002U\f\u0003\u0002\u0002\u0002VW\u0007y\u0002\u0002",
    "WX\u0007j\u0002\u0002XY\u0007k\u0002\u0002YZ\u0007n\u0002\u0002Z[\u0007",
    "g\u0002\u0002[\u000e\u0003\u0002\u0002\u0002\\]\u0007h\u0002\u0002]",
    "^\u0007w\u0002\u0002^_\u0007p\u0002\u0002_`\u0007e\u0002\u0002`\u0010",
    "\u0003\u0002\u0002\u0002ab\u0007-\u0002\u0002b\u0012\u0003\u0002\u0002",
    "\u0002cd\u0007/\u0002\u0002d\u0014\u0003\u0002\u0002\u0002ef\u0007,",
    "\u0002\u0002f\u0016\u0003\u0002\u0002\u0002gh\u00071\u0002\u0002h\u0018",
    "\u0003\u0002\u0002\u0002ij\u0007>\u0002\u0002jk\u0007?\u0002\u0002k",
    "\u001a\u0003\u0002\u0002\u0002lm\u0007@\u0002\u0002mn\u0007?\u0002\u0002",
    "n\u001c\u0003\u0002\u0002\u0002op\u0007>\u0002\u0002p\u001e\u0003\u0002",
    "\u0002\u0002qr\u0007@\u0002\u0002r \u0003\u0002\u0002\u0002st\u0007",
    "?\u0002\u0002tu\u0007?\u0002\u0002u\"\u0003\u0002\u0002\u0002vw\u0007",
    "#\u0002\u0002wx\u0007?\u0002\u0002x$\u0003\u0002\u0002\u0002yz\u0007",
    "c\u0002\u0002z{\u0007p\u0002\u0002{|\u0007f\u0002\u0002|&\u0003\u0002",
    "\u0002\u0002}~\u0007q\u0002\u0002~\u007f\u0007t\u0002\u0002\u007f(\u0003",
    "\u0002\u0002\u0002\u0080\u0081\u0007#\u0002\u0002\u0081*\u0003\u0002",
    "\u0002\u0002\u0082\u0083\u0007?\u0002\u0002\u0083,\u0003\u0002\u0002",
    "\u0002\u0084\u0085\u0007}\u0002\u0002\u0085.\u0003\u0002\u0002\u0002",
    "\u0086\u0087\u0007\u007f\u0002\u0002\u00870\u0003\u0002\u0002\u0002",
    "\u0088\u0089\u0007*\u0002\u0002\u00892\u0003\u0002\u0002\u0002\u008a",
    "\u008b\u0007+\u0002\u0002\u008b4\u0003\u0002\u0002\u0002\u008c\u008d",
    "\u0007r\u0002\u0002\u008d\u008e\u0007t\u0002\u0002\u008e\u008f\u0007",
    "k\u0002\u0002\u008f\u0090\u0007p\u0002\u0002\u0090\u0091\u0007v\u0002",
    "\u0002\u00916\u0003\u0002\u0002\u0002\u0092\u0093\u0007x\u0002\u0002",
    "\u0093\u0094\u0007c\u0002\u0002\u0094\u0095\u0007t\u0002\u0002\u0095",
    "8\u0003\u0002\u0002\u0002\u0096\u009a\t\u0004\u0002\u0002\u0097\u0099",
    "\t\u0005\u0002\u0002\u0098\u0097\u0003\u0002\u0002\u0002\u0099\u009c",
    "\u0003\u0002\u0002\u0002\u009a\u0098\u0003\u0002\u0002\u0002\u009a\u009b",
    "\u0003\u0002\u0002\u0002\u009b:\u0003\u0002\u0002\u0002\u009c\u009a",
    "\u0003\u0002\u0002\u0002\u009d\u00a1\t\u0004\u0002\u0002\u009e\u00a0",
    "\t\u0005\u0002\u0002\u009f\u009e\u0003\u0002\u0002\u0002\u00a0\u00a3",
    "\u0003\u0002\u0002\u0002\u00a1\u009f\u0003\u0002\u0002\u0002\u00a1\u00a2",
    "\u0003\u0002\u0002\u0002\u00a2<\u0003\u0002\u0002\u0002\u00a3\u00a1",
    "\u0003\u0002\u0002\u0002\u00a4\u00a6\t\u0006\u0002\u0002\u00a5\u00a4",
    "\u0003\u0002\u0002\u0002\u00a6\u00a7\u0003\u0002\u0002\u0002\u00a7\u00a5",
    "\u0003\u0002\u0002\u0002\u00a7\u00a8\u0003\u0002\u0002\u0002\u00a8>",
    "\u0003\u0002\u0002\u0002\u00a9\u00ab\t\u0006\u0002\u0002\u00aa\u00a9",
    "\u0003\u0002\u0002\u0002\u00ab\u00ac\u0003\u0002\u0002\u0002\u00ac\u00aa",
    "\u0003\u0002\u0002\u0002\u00ac\u00ad\u0003\u0002\u0002\u0002\u00ad\u00ae",
    "\u0003\u0002\u0002\u0002\u00ae\u00b2\u00070\u0002\u0002\u00af\u00b1",
    "\t\u0006\u0002\u0002\u00b0\u00af\u0003\u0002\u0002\u0002\u00b1\u00b4",
    "\u0003\u0002\u0002\u0002\u00b2\u00b0\u0003\u0002\u0002\u0002\u00b2\u00b3",
    "\u0003\u0002\u0002\u0002\u00b3\u00bc\u0003\u0002\u0002\u0002\u00b4\u00b2",
    "\u0003\u0002\u0002\u0002\u00b5\u00b7\u00070\u0002\u0002\u00b6\u00b8",
    "\t\u0006\u0002\u0002\u00b7\u00b6\u0003\u0002\u0002\u0002\u00b8\u00b9",
    "\u0003\u0002\u0002\u0002\u00b9\u00b7\u0003\u0002\u0002\u0002\u00b9\u00ba",
    "\u0003\u0002\u0002\u0002\u00ba\u00bc\u0003\u0002\u0002\u0002\u00bb\u00aa",
    "\u0003\u0002\u0002\u0002\u00bb\u00b5\u0003\u0002\u0002\u0002\u00bc@",
    "\u0003\u0002\u0002\u0002\u00bd\u00be\u00071\u0002\u0002\u00be\u00bf",
    "\u00071\u0002\u0002\u00bf\u00c3\u0003\u0002\u0002\u0002\u00c0\u00c2",
    "\n\u0007\u0002\u0002\u00c1\u00c0\u0003\u0002\u0002\u0002\u00c2\u00c5",
    "\u0003\u0002\u0002\u0002\u00c3\u00c1\u0003\u0002\u0002\u0002\u00c3\u00c4",
    "\u0003\u0002\u0002\u0002\u00c4\u00c6\u0003\u0002\u0002\u0002\u00c5\u00c3",
    "\u0003\u0002\u0002\u0002\u00c6\u00c7\b!\u0002\u0002\u00c7B\u0003\u0002",
    "\u0002\u0002\u000b\u0002\u009a\u00a1\u00a7\u00ac\u00b2\u00b9\u00bb\u00c3",
    "\u0003\b\u0002\u0002"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

function calculLexer(input) {
	antlr4.Lexer.call(this, input);
    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    return this;
}

calculLexer.prototype = Object.create(antlr4.Lexer.prototype);
calculLexer.prototype.constructor = calculLexer;

Object.defineProperty(calculLexer.prototype, "atn", {
        get : function() {
                return atn;
        }
});

calculLexer.EOF = antlr4.Token.EOF;
calculLexer.EOS = 1;
calculLexer.WS = 2;
calculLexer.IF = 3;
calculLexer.THEN = 4;
calculLexer.ELSE = 5;
calculLexer.WHILE = 6;
calculLexer.FUNC = 7;
calculLexer.PLUS = 8;
calculLexer.MINUS = 9;
calculLexer.MULT = 10;
calculLexer.DIV = 11;
calculLexer.LTEQ = 12;
calculLexer.GTEQ = 13;
calculLexer.LT = 14;
calculLexer.GT = 15;
calculLexer.EQ = 16;
calculLexer.NEQ = 17;
calculLexer.AND = 18;
calculLexer.OR = 19;
calculLexer.NOT = 20;
calculLexer.ASSIGN = 21;
calculLexer.L_SCOPE_BRACKET = 22;
calculLexer.R_SCOPE_BRACKET = 23;
calculLexer.L_ROUND_BRACKET = 24;
calculLexer.R_ROUND_BRACKET = 25;
calculLexer.PRINT = 26;
calculLexer.VAR = 27;
calculLexer.VAR_NAME = 28;
calculLexer.FUNC_NAME = 29;
calculLexer.INT = 30;
calculLexer.REAL = 31;
calculLexer.COMMENT = 32;

calculLexer.prototype.channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];

calculLexer.prototype.modeNames = [ "DEFAULT_MODE" ];

calculLexer.prototype.literalNames = [ null, null, null, "'if'", "'then'", 
                                       "'else'", "'while'", "'func'", "'+'", 
                                       "'-'", "'*'", "'/'", "'<='", "'>='", 
                                       "'<'", "'>'", "'=='", "'!='", "'and'", 
                                       "'or'", "'!'", "'='", "'{'", "'}'", 
                                       "'('", "')'", "'print'", "'var'" ];

calculLexer.prototype.symbolicNames = [ null, "EOS", "WS", "IF", "THEN", 
                                        "ELSE", "WHILE", "FUNC", "PLUS", 
                                        "MINUS", "MULT", "DIV", "LTEQ", 
                                        "GTEQ", "LT", "GT", "EQ", "NEQ", 
                                        "AND", "OR", "NOT", "ASSIGN", "L_SCOPE_BRACKET", 
                                        "R_SCOPE_BRACKET", "L_ROUND_BRACKET", 
                                        "R_ROUND_BRACKET", "PRINT", "VAR", 
                                        "VAR_NAME", "FUNC_NAME", "INT", 
                                        "REAL", "COMMENT" ];

calculLexer.prototype.ruleNames = [ "EOS", "WS", "IF", "THEN", "ELSE", "WHILE", 
                                    "FUNC", "PLUS", "MINUS", "MULT", "DIV", 
                                    "LTEQ", "GTEQ", "LT", "GT", "EQ", "NEQ", 
                                    "AND", "OR", "NOT", "ASSIGN", "L_SCOPE_BRACKET", 
                                    "R_SCOPE_BRACKET", "L_ROUND_BRACKET", 
                                    "R_ROUND_BRACKET", "PRINT", "VAR", "VAR_NAME", 
                                    "FUNC_NAME", "INT", "REAL", "COMMENT" ];

calculLexer.prototype.grammarFileName = "calcul.g4";


exports.calculLexer = calculLexer;

