// Generated from calcul.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');

// This class defines a complete generic visitor for a parse tree produced by calculParser.

function calculVisitor() {
	antlr4.tree.ParseTreeVisitor.call(this);
	return this;
}

calculVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);
calculVisitor.prototype.constructor = calculVisitor;

// Visit a parse tree produced by calculParser#program.
calculVisitor.prototype.visitProgram = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#source.
calculVisitor.prototype.visitSource = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#stat.
calculVisitor.prototype.visitStat = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#declVar.
calculVisitor.prototype.visitDeclVar = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#defineVar.
calculVisitor.prototype.visitDefineVar = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#assignValue.
calculVisitor.prototype.visitAssignValue = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#ifInstr.
calculVisitor.prototype.visitIfInstr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#ifElseInstr.
calculVisitor.prototype.visitIfElseInstr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#whileInstr.
calculVisitor.prototype.visitWhileInstr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#defineFunc.
calculVisitor.prototype.visitDefineFunc = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#callFuncOrPrintVar.
calculVisitor.prototype.visitCallFuncOrPrintVar = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#printExpr.
calculVisitor.prototype.visitPrintExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#scope.
calculVisitor.prototype.visitScope = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#addExpr.
calculVisitor.prototype.visitAddExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#ifExpr.
calculVisitor.prototype.visitIfExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#atomExpr.
calculVisitor.prototype.visitAtomExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#multiplyExpr.
calculVisitor.prototype.visitMultiplyExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#minusExpr.
calculVisitor.prototype.visitMinusExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#compareExpr.
calculVisitor.prototype.visitCompareExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#equalExpr.
calculVisitor.prototype.visitEqualExpr = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#numberAtom.
calculVisitor.prototype.visitNumberAtom = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#varAtom.
calculVisitor.prototype.visitVarAtom = function(ctx) {
  return this.visitChildren(ctx);
};


// Visit a parse tree produced by calculParser#bracketsAtom.
calculVisitor.prototype.visitBracketsAtom = function(ctx) {
  return this.visitChildren(ctx);
};



exports.calculVisitor = calculVisitor;