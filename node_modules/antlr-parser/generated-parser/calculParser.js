// Generated from calcul.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var calculListener = require('./calculListener').calculListener;
var calculVisitor = require('./calculVisitor').calculVisitor;

var grammarFileName = "calcul.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\"\u0097\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0003",
    "\u0002\u0005\u0002\"\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0006",
    "\u0003\'\n\u0003\r\u0003\u000e\u0003(\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0005\u00046\n\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000bY\n\u000b\f\u000b\u000e",
    "\u000b\\\u000b\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003",
    "\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0007\u000e",
    "i\n\u000e\f\u000e\u000e\u000el\u000b\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005",
    "\u000f|\n\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0007\u000f\u008a\n\u000f\f\u000f\u000e\u000f\u008d",
    "\u000b\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0005\u0010\u0095\n\u0010\u0003\u0010\u0002\u0003\u001c",
    "\u0011\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e\u0002\u0007\u0003\u0002\f\r\u0003\u0002\n\u000b\u0003\u0002",
    "\u000e\u0011\u0003\u0002\u0012\u0013\u0003\u0002 !\u0002\u009d\u0002",
    "!\u0003\u0002\u0002\u0002\u0004&\u0003\u0002\u0002\u0002\u00065\u0003",
    "\u0002\u0002\u0002\b7\u0003\u0002\u0002\u0002\n;\u0003\u0002\u0002\u0002",
    "\fA\u0003\u0002\u0002\u0002\u000eF\u0003\u0002\u0002\u0002\u0010J\u0003",
    "\u0002\u0002\u0002\u0012P\u0003\u0002\u0002\u0002\u0014T\u0003\u0002",
    "\u0002\u0002\u0016`\u0003\u0002\u0002\u0002\u0018c\u0003\u0002\u0002",
    "\u0002\u001af\u0003\u0002\u0002\u0002\u001c{\u0003\u0002\u0002\u0002",
    "\u001e\u0094\u0003\u0002\u0002\u0002 \"\u0005\u0004\u0003\u0002! \u0003",
    "\u0002\u0002\u0002!\"\u0003\u0002\u0002\u0002\"#\u0003\u0002\u0002\u0002",
    "#$\u0007\u0002\u0002\u0003$\u0003\u0003\u0002\u0002\u0002%\'\u0005\u0006",
    "\u0004\u0002&%\u0003\u0002\u0002\u0002\'(\u0003\u0002\u0002\u0002(&",
    "\u0003\u0002\u0002\u0002()\u0003\u0002\u0002\u0002)\u0005\u0003\u0002",
    "\u0002\u0002*6\u0005\b\u0005\u0002+6\u0005\n\u0006\u0002,6\u0005\f\u0007",
    "\u0002-6\u0005\u001a\u000e\u0002.6\u0005\u000e\b\u0002/6\u0005\u0010",
    "\t\u000206\u0005\u0012\n\u000216\u0005\u0014\u000b\u000226\u0005\u0016",
    "\f\u000236\u0005\u0018\r\u000246\u0007\u0003\u0002\u00025*\u0003\u0002",
    "\u0002\u00025+\u0003\u0002\u0002\u00025,\u0003\u0002\u0002\u00025-\u0003",
    "\u0002\u0002\u00025.\u0003\u0002\u0002\u00025/\u0003\u0002\u0002\u0002",
    "50\u0003\u0002\u0002\u000251\u0003\u0002\u0002\u000252\u0003\u0002\u0002",
    "\u000253\u0003\u0002\u0002\u000254\u0003\u0002\u0002\u00026\u0007\u0003",
    "\u0002\u0002\u000278\u0007\u001d\u0002\u000289\u0007\u001e\u0002\u0002",
    "9:\u0007\u0003\u0002\u0002:\t\u0003\u0002\u0002\u0002;<\u0007\u001d",
    "\u0002\u0002<=\u0007\u001e\u0002\u0002=>\u0007\u0017\u0002\u0002>?\u0005",
    "\u001c\u000f\u0002?@\u0007\u0003\u0002\u0002@\u000b\u0003\u0002\u0002",
    "\u0002AB\u0007\u001e\u0002\u0002BC\u0007\u0017\u0002\u0002CD\u0005\u001c",
    "\u000f\u0002DE\u0007\u0003\u0002\u0002E\r\u0003\u0002\u0002\u0002FG",
    "\u0007\u0005\u0002\u0002GH\u0005\u001c\u000f\u0002HI\u0005\u001a\u000e",
    "\u0002I\u000f\u0003\u0002\u0002\u0002JK\u0007\u0005\u0002\u0002KL\u0005",
    "\u001c\u000f\u0002LM\u0005\u001a\u000e\u0002MN\u0007\u0007\u0002\u0002",
    "NO\u0005\u001a\u000e\u0002O\u0011\u0003\u0002\u0002\u0002PQ\u0007\b",
    "\u0002\u0002QR\u0005\u001c\u000f\u0002RS\u0005\u001a\u000e\u0002S\u0013",
    "\u0003\u0002\u0002\u0002TU\u0007\t\u0002\u0002UV\u0007\u001e\u0002\u0002",
    "VZ\u0007\u0018\u0002\u0002WY\u0005\u0006\u0004\u0002XW\u0003\u0002\u0002",
    "\u0002Y\\\u0003\u0002\u0002\u0002ZX\u0003\u0002\u0002\u0002Z[\u0003",
    "\u0002\u0002\u0002[]\u0003\u0002\u0002\u0002\\Z\u0003\u0002\u0002\u0002",
    "]^\u0007\u0019\u0002\u0002^_\u0007\u0003\u0002\u0002_\u0015\u0003\u0002",
    "\u0002\u0002`a\u0007\u001e\u0002\u0002ab\u0007\u0003\u0002\u0002b\u0017",
    "\u0003\u0002\u0002\u0002cd\u0005\u001c\u000f\u0002de\u0007\u0003\u0002",
    "\u0002e\u0019\u0003\u0002\u0002\u0002fj\u0007\u0018\u0002\u0002gi\u0005",
    "\u0006\u0004\u0002hg\u0003\u0002\u0002\u0002il\u0003\u0002\u0002\u0002",
    "jh\u0003\u0002\u0002\u0002jk\u0003\u0002\u0002\u0002km\u0003\u0002\u0002",
    "\u0002lj\u0003\u0002\u0002\u0002mn\u0007\u0019\u0002\u0002no\u0007\u0003",
    "\u0002\u0002o\u001b\u0003\u0002\u0002\u0002pq\b\u000f\u0001\u0002qr",
    "\u0007\u000b\u0002\u0002r|\u0005\u001c\u000f\tst\u0007\u0005\u0002\u0002",
    "tu\u0005\u001c\u000f\u0002uv\u0007\u0006\u0002\u0002vw\u0005\u001c\u000f",
    "\u0002wx\u0007\u0007\u0002\u0002xy\u0005\u001c\u000f\u0004y|\u0003\u0002",
    "\u0002\u0002z|\u0005\u001e\u0010\u0002{p\u0003\u0002\u0002\u0002{s\u0003",
    "\u0002\u0002\u0002{z\u0003\u0002\u0002\u0002|\u008b\u0003\u0002\u0002",
    "\u0002}~\f\b\u0002\u0002~\u007f\t\u0002\u0002\u0002\u007f\u008a\u0005",
    "\u001c\u000f\t\u0080\u0081\f\u0007\u0002\u0002\u0081\u0082\t\u0003\u0002",
    "\u0002\u0082\u008a\u0005\u001c\u000f\b\u0083\u0084\f\u0006\u0002\u0002",
    "\u0084\u0085\t\u0004\u0002\u0002\u0085\u008a\u0005\u001c\u000f\u0007",
    "\u0086\u0087\f\u0005\u0002\u0002\u0087\u0088\t\u0005\u0002\u0002\u0088",
    "\u008a\u0005\u001c\u000f\u0006\u0089}\u0003\u0002\u0002\u0002\u0089",
    "\u0080\u0003\u0002\u0002\u0002\u0089\u0083\u0003\u0002\u0002\u0002\u0089",
    "\u0086\u0003\u0002\u0002\u0002\u008a\u008d\u0003\u0002\u0002\u0002\u008b",
    "\u0089\u0003\u0002\u0002\u0002\u008b\u008c\u0003\u0002\u0002\u0002\u008c",
    "\u001d\u0003\u0002\u0002\u0002\u008d\u008b\u0003\u0002\u0002\u0002\u008e",
    "\u0095\t\u0006\u0002\u0002\u008f\u0095\u0007\u001e\u0002\u0002\u0090",
    "\u0091\u0007\u001a\u0002\u0002\u0091\u0092\u0005\u001c\u000f\u0002\u0092",
    "\u0093\u0007\u001b\u0002\u0002\u0093\u0095\u0003\u0002\u0002\u0002\u0094",
    "\u008e\u0003\u0002\u0002\u0002\u0094\u008f\u0003\u0002\u0002\u0002\u0094",
    "\u0090\u0003\u0002\u0002\u0002\u0095\u001f\u0003\u0002\u0002\u0002\u000b",
    "!(5Zj{\u0089\u008b\u0094"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, "'if'", "'then'", "'else'", "'while'", 
                     "'func'", "'+'", "'-'", "'*'", "'/'", "'<='", "'>='", 
                     "'<'", "'>'", "'=='", "'!='", "'and'", "'or'", "'!'", 
                     "'='", "'{'", "'}'", "'('", "')'", "'print'", "'var'" ];

var symbolicNames = [ null, "EOS", "WS", "IF", "THEN", "ELSE", "WHILE", 
                      "FUNC", "PLUS", "MINUS", "MULT", "DIV", "LTEQ", "GTEQ", 
                      "LT", "GT", "EQ", "NEQ", "AND", "OR", "NOT", "ASSIGN", 
                      "L_SCOPE_BRACKET", "R_SCOPE_BRACKET", "L_ROUND_BRACKET", 
                      "R_ROUND_BRACKET", "PRINT", "VAR", "VAR_NAME", "FUNC_NAME", 
                      "INT", "REAL", "COMMENT" ];

var ruleNames =  [ "program", "source", "stat", "declVar", "defineVar", 
                   "assignValue", "ifInstr", "ifElseInstr", "whileInstr", 
                   "defineFunc", "callFuncOrPrintVar", "printExpr", "scope", 
                   "expr", "atom" ];

function calculParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

calculParser.prototype = Object.create(antlr4.Parser.prototype);
calculParser.prototype.constructor = calculParser;

Object.defineProperty(calculParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

calculParser.EOF = antlr4.Token.EOF;
calculParser.EOS = 1;
calculParser.WS = 2;
calculParser.IF = 3;
calculParser.THEN = 4;
calculParser.ELSE = 5;
calculParser.WHILE = 6;
calculParser.FUNC = 7;
calculParser.PLUS = 8;
calculParser.MINUS = 9;
calculParser.MULT = 10;
calculParser.DIV = 11;
calculParser.LTEQ = 12;
calculParser.GTEQ = 13;
calculParser.LT = 14;
calculParser.GT = 15;
calculParser.EQ = 16;
calculParser.NEQ = 17;
calculParser.AND = 18;
calculParser.OR = 19;
calculParser.NOT = 20;
calculParser.ASSIGN = 21;
calculParser.L_SCOPE_BRACKET = 22;
calculParser.R_SCOPE_BRACKET = 23;
calculParser.L_ROUND_BRACKET = 24;
calculParser.R_ROUND_BRACKET = 25;
calculParser.PRINT = 26;
calculParser.VAR = 27;
calculParser.VAR_NAME = 28;
calculParser.FUNC_NAME = 29;
calculParser.INT = 30;
calculParser.REAL = 31;
calculParser.COMMENT = 32;

calculParser.RULE_program = 0;
calculParser.RULE_source = 1;
calculParser.RULE_stat = 2;
calculParser.RULE_declVar = 3;
calculParser.RULE_defineVar = 4;
calculParser.RULE_assignValue = 5;
calculParser.RULE_ifInstr = 6;
calculParser.RULE_ifElseInstr = 7;
calculParser.RULE_whileInstr = 8;
calculParser.RULE_defineFunc = 9;
calculParser.RULE_callFuncOrPrintVar = 10;
calculParser.RULE_printExpr = 11;
calculParser.RULE_scope = 12;
calculParser.RULE_expr = 13;
calculParser.RULE_atom = 14;


function ProgramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_program;
    return this;
}

ProgramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProgramContext.prototype.constructor = ProgramContext;

ProgramContext.prototype.EOF = function() {
    return this.getToken(calculParser.EOF, 0);
};

ProgramContext.prototype.source = function() {
    return this.getTypedRuleContext(SourceContext,0);
};

ProgramContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterProgram(this);
	}
};

ProgramContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitProgram(this);
	}
};

ProgramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitProgram(this);
    } else {
        return visitor.visitChildren(this);
    }
};




calculParser.ProgramContext = ProgramContext;

calculParser.prototype.program = function() {

    var localctx = new ProgramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, calculParser.RULE_program);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 31;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << calculParser.EOS) | (1 << calculParser.IF) | (1 << calculParser.WHILE) | (1 << calculParser.FUNC) | (1 << calculParser.MINUS) | (1 << calculParser.L_SCOPE_BRACKET) | (1 << calculParser.L_ROUND_BRACKET) | (1 << calculParser.VAR) | (1 << calculParser.VAR_NAME) | (1 << calculParser.INT) | (1 << calculParser.REAL))) !== 0)) {
            this.state = 30;
            this.source();
        }

        this.state = 33;
        this.match(calculParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_source;
    return this;
}

SourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceContext.prototype.constructor = SourceContext;

SourceContext.prototype.stat = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatContext);
    } else {
        return this.getTypedRuleContext(StatContext,i);
    }
};

SourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterSource(this);
	}
};

SourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitSource(this);
	}
};

SourceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitSource(this);
    } else {
        return visitor.visitChildren(this);
    }
};




calculParser.SourceContext = SourceContext;

calculParser.prototype.source = function() {

    var localctx = new SourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, calculParser.RULE_source);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 36; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 35;
            this.stat();
            this.state = 38; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << calculParser.EOS) | (1 << calculParser.IF) | (1 << calculParser.WHILE) | (1 << calculParser.FUNC) | (1 << calculParser.MINUS) | (1 << calculParser.L_SCOPE_BRACKET) | (1 << calculParser.L_ROUND_BRACKET) | (1 << calculParser.VAR) | (1 << calculParser.VAR_NAME) | (1 << calculParser.INT) | (1 << calculParser.REAL))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function StatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_stat;
    return this;
}

StatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatContext.prototype.constructor = StatContext;

StatContext.prototype.declVar = function() {
    return this.getTypedRuleContext(DeclVarContext,0);
};

StatContext.prototype.defineVar = function() {
    return this.getTypedRuleContext(DefineVarContext,0);
};

StatContext.prototype.assignValue = function() {
    return this.getTypedRuleContext(AssignValueContext,0);
};

StatContext.prototype.scope = function() {
    return this.getTypedRuleContext(ScopeContext,0);
};

StatContext.prototype.ifInstr = function() {
    return this.getTypedRuleContext(IfInstrContext,0);
};

StatContext.prototype.ifElseInstr = function() {
    return this.getTypedRuleContext(IfElseInstrContext,0);
};

StatContext.prototype.whileInstr = function() {
    return this.getTypedRuleContext(WhileInstrContext,0);
};

StatContext.prototype.defineFunc = function() {
    return this.getTypedRuleContext(DefineFuncContext,0);
};

StatContext.prototype.callFuncOrPrintVar = function() {
    return this.getTypedRuleContext(CallFuncOrPrintVarContext,0);
};

StatContext.prototype.printExpr = function() {
    return this.getTypedRuleContext(PrintExprContext,0);
};

StatContext.prototype.EOS = function() {
    return this.getToken(calculParser.EOS, 0);
};

StatContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterStat(this);
	}
};

StatContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitStat(this);
	}
};

StatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitStat(this);
    } else {
        return visitor.visitChildren(this);
    }
};




calculParser.StatContext = StatContext;

calculParser.prototype.stat = function() {

    var localctx = new StatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, calculParser.RULE_stat);
    try {
        this.state = 51;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 40;
            this.declVar();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 41;
            this.defineVar();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 42;
            this.assignValue();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 43;
            this.scope();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 44;
            this.ifInstr();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 45;
            this.ifElseInstr();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 46;
            this.whileInstr();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 47;
            this.defineFunc();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 48;
            this.callFuncOrPrintVar();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 49;
            this.printExpr();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 50;
            this.match(calculParser.EOS);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DeclVarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_declVar;
    return this;
}

DeclVarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclVarContext.prototype.constructor = DeclVarContext;

DeclVarContext.prototype.VAR = function() {
    return this.getToken(calculParser.VAR, 0);
};

DeclVarContext.prototype.VAR_NAME = function() {
    return this.getToken(calculParser.VAR_NAME, 0);
};

DeclVarContext.prototype.EOS = function() {
    return this.getToken(calculParser.EOS, 0);
};

DeclVarContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterDeclVar(this);
	}
};

DeclVarContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitDeclVar(this);
	}
};

DeclVarContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitDeclVar(this);
    } else {
        return visitor.visitChildren(this);
    }
};




calculParser.DeclVarContext = DeclVarContext;

calculParser.prototype.declVar = function() {

    var localctx = new DeclVarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, calculParser.RULE_declVar);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 53;
        this.match(calculParser.VAR);
        this.state = 54;
        this.match(calculParser.VAR_NAME);
        this.state = 55;
        this.match(calculParser.EOS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefineVarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_defineVar;
    return this;
}

DefineVarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefineVarContext.prototype.constructor = DefineVarContext;

DefineVarContext.prototype.VAR = function() {
    return this.getToken(calculParser.VAR, 0);
};

DefineVarContext.prototype.VAR_NAME = function() {
    return this.getToken(calculParser.VAR_NAME, 0);
};

DefineVarContext.prototype.ASSIGN = function() {
    return this.getToken(calculParser.ASSIGN, 0);
};

DefineVarContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

DefineVarContext.prototype.EOS = function() {
    return this.getToken(calculParser.EOS, 0);
};

DefineVarContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterDefineVar(this);
	}
};

DefineVarContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitDefineVar(this);
	}
};

DefineVarContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitDefineVar(this);
    } else {
        return visitor.visitChildren(this);
    }
};




calculParser.DefineVarContext = DefineVarContext;

calculParser.prototype.defineVar = function() {

    var localctx = new DefineVarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, calculParser.RULE_defineVar);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 57;
        this.match(calculParser.VAR);
        this.state = 58;
        this.match(calculParser.VAR_NAME);
        this.state = 59;
        this.match(calculParser.ASSIGN);
        this.state = 60;
        this.expr(0);
        this.state = 61;
        this.match(calculParser.EOS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_assignValue;
    return this;
}

AssignValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignValueContext.prototype.constructor = AssignValueContext;

AssignValueContext.prototype.VAR_NAME = function() {
    return this.getToken(calculParser.VAR_NAME, 0);
};

AssignValueContext.prototype.ASSIGN = function() {
    return this.getToken(calculParser.ASSIGN, 0);
};

AssignValueContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

AssignValueContext.prototype.EOS = function() {
    return this.getToken(calculParser.EOS, 0);
};

AssignValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterAssignValue(this);
	}
};

AssignValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitAssignValue(this);
	}
};

AssignValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitAssignValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




calculParser.AssignValueContext = AssignValueContext;

calculParser.prototype.assignValue = function() {

    var localctx = new AssignValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, calculParser.RULE_assignValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 63;
        this.match(calculParser.VAR_NAME);
        this.state = 64;
        this.match(calculParser.ASSIGN);
        this.state = 65;
        this.expr(0);
        this.state = 66;
        this.match(calculParser.EOS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfInstrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_ifInstr;
    return this;
}

IfInstrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfInstrContext.prototype.constructor = IfInstrContext;

IfInstrContext.prototype.IF = function() {
    return this.getToken(calculParser.IF, 0);
};

IfInstrContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

IfInstrContext.prototype.scope = function() {
    return this.getTypedRuleContext(ScopeContext,0);
};

IfInstrContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterIfInstr(this);
	}
};

IfInstrContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitIfInstr(this);
	}
};

IfInstrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitIfInstr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




calculParser.IfInstrContext = IfInstrContext;

calculParser.prototype.ifInstr = function() {

    var localctx = new IfInstrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, calculParser.RULE_ifInstr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 68;
        this.match(calculParser.IF);
        this.state = 69;
        this.expr(0);
        this.state = 70;
        this.scope();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IfElseInstrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_ifElseInstr;
    return this;
}

IfElseInstrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfElseInstrContext.prototype.constructor = IfElseInstrContext;

IfElseInstrContext.prototype.IF = function() {
    return this.getToken(calculParser.IF, 0);
};

IfElseInstrContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

IfElseInstrContext.prototype.scope = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ScopeContext);
    } else {
        return this.getTypedRuleContext(ScopeContext,i);
    }
};

IfElseInstrContext.prototype.ELSE = function() {
    return this.getToken(calculParser.ELSE, 0);
};

IfElseInstrContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterIfElseInstr(this);
	}
};

IfElseInstrContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitIfElseInstr(this);
	}
};

IfElseInstrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitIfElseInstr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




calculParser.IfElseInstrContext = IfElseInstrContext;

calculParser.prototype.ifElseInstr = function() {

    var localctx = new IfElseInstrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, calculParser.RULE_ifElseInstr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 72;
        this.match(calculParser.IF);
        this.state = 73;
        this.expr(0);
        this.state = 74;
        this.scope();
        this.state = 75;
        this.match(calculParser.ELSE);
        this.state = 76;
        this.scope();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhileInstrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_whileInstr;
    return this;
}

WhileInstrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileInstrContext.prototype.constructor = WhileInstrContext;

WhileInstrContext.prototype.WHILE = function() {
    return this.getToken(calculParser.WHILE, 0);
};

WhileInstrContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

WhileInstrContext.prototype.scope = function() {
    return this.getTypedRuleContext(ScopeContext,0);
};

WhileInstrContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterWhileInstr(this);
	}
};

WhileInstrContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitWhileInstr(this);
	}
};

WhileInstrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitWhileInstr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




calculParser.WhileInstrContext = WhileInstrContext;

calculParser.prototype.whileInstr = function() {

    var localctx = new WhileInstrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, calculParser.RULE_whileInstr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 78;
        this.match(calculParser.WHILE);
        this.state = 79;
        this.expr(0);
        this.state = 80;
        this.scope();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DefineFuncContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_defineFunc;
    return this;
}

DefineFuncContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefineFuncContext.prototype.constructor = DefineFuncContext;

DefineFuncContext.prototype.FUNC = function() {
    return this.getToken(calculParser.FUNC, 0);
};

DefineFuncContext.prototype.VAR_NAME = function() {
    return this.getToken(calculParser.VAR_NAME, 0);
};

DefineFuncContext.prototype.L_SCOPE_BRACKET = function() {
    return this.getToken(calculParser.L_SCOPE_BRACKET, 0);
};

DefineFuncContext.prototype.R_SCOPE_BRACKET = function() {
    return this.getToken(calculParser.R_SCOPE_BRACKET, 0);
};

DefineFuncContext.prototype.EOS = function() {
    return this.getToken(calculParser.EOS, 0);
};

DefineFuncContext.prototype.stat = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatContext);
    } else {
        return this.getTypedRuleContext(StatContext,i);
    }
};

DefineFuncContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterDefineFunc(this);
	}
};

DefineFuncContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitDefineFunc(this);
	}
};

DefineFuncContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitDefineFunc(this);
    } else {
        return visitor.visitChildren(this);
    }
};




calculParser.DefineFuncContext = DefineFuncContext;

calculParser.prototype.defineFunc = function() {

    var localctx = new DefineFuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, calculParser.RULE_defineFunc);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 82;
        this.match(calculParser.FUNC);
        this.state = 83;
        this.match(calculParser.VAR_NAME);
        this.state = 84;
        this.match(calculParser.L_SCOPE_BRACKET);
        this.state = 88;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << calculParser.EOS) | (1 << calculParser.IF) | (1 << calculParser.WHILE) | (1 << calculParser.FUNC) | (1 << calculParser.MINUS) | (1 << calculParser.L_SCOPE_BRACKET) | (1 << calculParser.L_ROUND_BRACKET) | (1 << calculParser.VAR) | (1 << calculParser.VAR_NAME) | (1 << calculParser.INT) | (1 << calculParser.REAL))) !== 0)) {
            this.state = 85;
            this.stat();
            this.state = 90;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 91;
        this.match(calculParser.R_SCOPE_BRACKET);
        this.state = 92;
        this.match(calculParser.EOS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CallFuncOrPrintVarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_callFuncOrPrintVar;
    return this;
}

CallFuncOrPrintVarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CallFuncOrPrintVarContext.prototype.constructor = CallFuncOrPrintVarContext;

CallFuncOrPrintVarContext.prototype.VAR_NAME = function() {
    return this.getToken(calculParser.VAR_NAME, 0);
};

CallFuncOrPrintVarContext.prototype.EOS = function() {
    return this.getToken(calculParser.EOS, 0);
};

CallFuncOrPrintVarContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterCallFuncOrPrintVar(this);
	}
};

CallFuncOrPrintVarContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitCallFuncOrPrintVar(this);
	}
};

CallFuncOrPrintVarContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitCallFuncOrPrintVar(this);
    } else {
        return visitor.visitChildren(this);
    }
};




calculParser.CallFuncOrPrintVarContext = CallFuncOrPrintVarContext;

calculParser.prototype.callFuncOrPrintVar = function() {

    var localctx = new CallFuncOrPrintVarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, calculParser.RULE_callFuncOrPrintVar);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 94;
        this.match(calculParser.VAR_NAME);
        this.state = 95;
        this.match(calculParser.EOS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrintExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_printExpr;
    return this;
}

PrintExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrintExprContext.prototype.constructor = PrintExprContext;

PrintExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

PrintExprContext.prototype.EOS = function() {
    return this.getToken(calculParser.EOS, 0);
};

PrintExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterPrintExpr(this);
	}
};

PrintExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitPrintExpr(this);
	}
};

PrintExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitPrintExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




calculParser.PrintExprContext = PrintExprContext;

calculParser.prototype.printExpr = function() {

    var localctx = new PrintExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, calculParser.RULE_printExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 97;
        this.expr(0);
        this.state = 98;
        this.match(calculParser.EOS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ScopeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_scope;
    return this;
}

ScopeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ScopeContext.prototype.constructor = ScopeContext;

ScopeContext.prototype.L_SCOPE_BRACKET = function() {
    return this.getToken(calculParser.L_SCOPE_BRACKET, 0);
};

ScopeContext.prototype.R_SCOPE_BRACKET = function() {
    return this.getToken(calculParser.R_SCOPE_BRACKET, 0);
};

ScopeContext.prototype.EOS = function() {
    return this.getToken(calculParser.EOS, 0);
};

ScopeContext.prototype.stat = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatContext);
    } else {
        return this.getTypedRuleContext(StatContext,i);
    }
};

ScopeContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterScope(this);
	}
};

ScopeContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitScope(this);
	}
};

ScopeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitScope(this);
    } else {
        return visitor.visitChildren(this);
    }
};




calculParser.ScopeContext = ScopeContext;

calculParser.prototype.scope = function() {

    var localctx = new ScopeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, calculParser.RULE_scope);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 100;
        this.match(calculParser.L_SCOPE_BRACKET);
        this.state = 104;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << calculParser.EOS) | (1 << calculParser.IF) | (1 << calculParser.WHILE) | (1 << calculParser.FUNC) | (1 << calculParser.MINUS) | (1 << calculParser.L_SCOPE_BRACKET) | (1 << calculParser.L_ROUND_BRACKET) | (1 << calculParser.VAR) | (1 << calculParser.VAR_NAME) | (1 << calculParser.INT) | (1 << calculParser.REAL))) !== 0)) {
            this.state = 101;
            this.stat();
            this.state = 106;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 107;
        this.match(calculParser.R_SCOPE_BRACKET);
        this.state = 108;
        this.match(calculParser.EOS);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;


 
ExprContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function AddExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.op = null; // Token;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddExprContext.prototype = Object.create(ExprContext.prototype);
AddExprContext.prototype.constructor = AddExprContext;

calculParser.AddExprContext = AddExprContext;

AddExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

AddExprContext.prototype.PLUS = function() {
    return this.getToken(calculParser.PLUS, 0);
};

AddExprContext.prototype.MINUS = function() {
    return this.getToken(calculParser.MINUS, 0);
};
AddExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterAddExpr(this);
	}
};

AddExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitAddExpr(this);
	}
};

AddExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitAddExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function IfExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IfExprContext.prototype = Object.create(ExprContext.prototype);
IfExprContext.prototype.constructor = IfExprContext;

calculParser.IfExprContext = IfExprContext;

IfExprContext.prototype.IF = function() {
    return this.getToken(calculParser.IF, 0);
};

IfExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

IfExprContext.prototype.THEN = function() {
    return this.getToken(calculParser.THEN, 0);
};

IfExprContext.prototype.ELSE = function() {
    return this.getToken(calculParser.ELSE, 0);
};
IfExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterIfExpr(this);
	}
};

IfExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitIfExpr(this);
	}
};

IfExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitIfExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AtomExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AtomExprContext.prototype = Object.create(ExprContext.prototype);
AtomExprContext.prototype.constructor = AtomExprContext;

calculParser.AtomExprContext = AtomExprContext;

AtomExprContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};
AtomExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterAtomExpr(this);
	}
};

AtomExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitAtomExpr(this);
	}
};

AtomExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitAtomExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MultiplyExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.op = null; // Token;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplyExprContext.prototype = Object.create(ExprContext.prototype);
MultiplyExprContext.prototype.constructor = MultiplyExprContext;

calculParser.MultiplyExprContext = MultiplyExprContext;

MultiplyExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

MultiplyExprContext.prototype.MULT = function() {
    return this.getToken(calculParser.MULT, 0);
};

MultiplyExprContext.prototype.DIV = function() {
    return this.getToken(calculParser.DIV, 0);
};
MultiplyExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterMultiplyExpr(this);
	}
};

MultiplyExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitMultiplyExpr(this);
	}
};

MultiplyExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitMultiplyExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function MinusExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MinusExprContext.prototype = Object.create(ExprContext.prototype);
MinusExprContext.prototype.constructor = MinusExprContext;

calculParser.MinusExprContext = MinusExprContext;

MinusExprContext.prototype.MINUS = function() {
    return this.getToken(calculParser.MINUS, 0);
};

MinusExprContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};
MinusExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterMinusExpr(this);
	}
};

MinusExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitMinusExpr(this);
	}
};

MinusExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitMinusExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CompareExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.op = null; // Token;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CompareExprContext.prototype = Object.create(ExprContext.prototype);
CompareExprContext.prototype.constructor = CompareExprContext;

calculParser.CompareExprContext = CompareExprContext;

CompareExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

CompareExprContext.prototype.LTEQ = function() {
    return this.getToken(calculParser.LTEQ, 0);
};

CompareExprContext.prototype.GTEQ = function() {
    return this.getToken(calculParser.GTEQ, 0);
};

CompareExprContext.prototype.LT = function() {
    return this.getToken(calculParser.LT, 0);
};

CompareExprContext.prototype.GT = function() {
    return this.getToken(calculParser.GT, 0);
};
CompareExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterCompareExpr(this);
	}
};

CompareExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitCompareExpr(this);
	}
};

CompareExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitCompareExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function EqualExprContext(parser, ctx) {
	ExprContext.call(this, parser);
    this.op = null; // Token;
    ExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EqualExprContext.prototype = Object.create(ExprContext.prototype);
EqualExprContext.prototype.constructor = EqualExprContext;

calculParser.EqualExprContext = EqualExprContext;

EqualExprContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

EqualExprContext.prototype.EQ = function() {
    return this.getToken(calculParser.EQ, 0);
};

EqualExprContext.prototype.NEQ = function() {
    return this.getToken(calculParser.NEQ, 0);
};
EqualExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterEqualExpr(this);
	}
};

EqualExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitEqualExpr(this);
	}
};

EqualExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitEqualExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};



calculParser.prototype.expr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 26;
    this.enterRecursionRule(localctx, 26, calculParser.RULE_expr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 121;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case calculParser.MINUS:
            localctx = new MinusExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 111;
            this.match(calculParser.MINUS);
            this.state = 112;
            this.expr(7);
            break;
        case calculParser.IF:
            localctx = new IfExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 113;
            this.match(calculParser.IF);
            this.state = 114;
            this.expr(0);
            this.state = 115;
            this.match(calculParser.THEN);
            this.state = 116;
            this.expr(0);
            this.state = 117;
            this.match(calculParser.ELSE);
            this.state = 118;
            this.expr(2);
            break;
        case calculParser.L_ROUND_BRACKET:
        case calculParser.VAR_NAME:
        case calculParser.INT:
        case calculParser.REAL:
            localctx = new AtomExprContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 120;
            this.atom();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 137;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 135;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplyExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, calculParser.RULE_expr);
                    this.state = 123;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 124;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===calculParser.MULT || _la===calculParser.DIV)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 125;
                    this.expr(7);
                    break;

                case 2:
                    localctx = new AddExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, calculParser.RULE_expr);
                    this.state = 126;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 127;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===calculParser.PLUS || _la===calculParser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 128;
                    this.expr(6);
                    break;

                case 3:
                    localctx = new CompareExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, calculParser.RULE_expr);
                    this.state = 129;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 130;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << calculParser.LTEQ) | (1 << calculParser.GTEQ) | (1 << calculParser.LT) | (1 << calculParser.GT))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 131;
                    this.expr(5);
                    break;

                case 4:
                    localctx = new EqualExprContext(this, new ExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, calculParser.RULE_expr);
                    this.state = 132;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 133;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===calculParser.EQ || _la===calculParser.NEQ)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 134;
                    this.expr(4);
                    break;

                } 
            }
            this.state = 139;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function AtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = calculParser.RULE_atom;
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;


 
AtomContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function BracketsAtomContext(parser, ctx) {
	AtomContext.call(this, parser);
    AtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BracketsAtomContext.prototype = Object.create(AtomContext.prototype);
BracketsAtomContext.prototype.constructor = BracketsAtomContext;

calculParser.BracketsAtomContext = BracketsAtomContext;

BracketsAtomContext.prototype.L_ROUND_BRACKET = function() {
    return this.getToken(calculParser.L_ROUND_BRACKET, 0);
};

BracketsAtomContext.prototype.expr = function() {
    return this.getTypedRuleContext(ExprContext,0);
};

BracketsAtomContext.prototype.R_ROUND_BRACKET = function() {
    return this.getToken(calculParser.R_ROUND_BRACKET, 0);
};
BracketsAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterBracketsAtom(this);
	}
};

BracketsAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitBracketsAtom(this);
	}
};

BracketsAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitBracketsAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function VarAtomContext(parser, ctx) {
	AtomContext.call(this, parser);
    AtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

VarAtomContext.prototype = Object.create(AtomContext.prototype);
VarAtomContext.prototype.constructor = VarAtomContext;

calculParser.VarAtomContext = VarAtomContext;

VarAtomContext.prototype.VAR_NAME = function() {
    return this.getToken(calculParser.VAR_NAME, 0);
};
VarAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterVarAtom(this);
	}
};

VarAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitVarAtom(this);
	}
};

VarAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitVarAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function NumberAtomContext(parser, ctx) {
	AtomContext.call(this, parser);
    AtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NumberAtomContext.prototype = Object.create(AtomContext.prototype);
NumberAtomContext.prototype.constructor = NumberAtomContext;

calculParser.NumberAtomContext = NumberAtomContext;

NumberAtomContext.prototype.INT = function() {
    return this.getToken(calculParser.INT, 0);
};

NumberAtomContext.prototype.REAL = function() {
    return this.getToken(calculParser.REAL, 0);
};
NumberAtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.enterNumberAtom(this);
	}
};

NumberAtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof calculListener ) {
        listener.exitNumberAtom(this);
	}
};

NumberAtomContext.prototype.accept = function(visitor) {
    if ( visitor instanceof calculVisitor ) {
        return visitor.visitNumberAtom(this);
    } else {
        return visitor.visitChildren(this);
    }
};



calculParser.AtomContext = AtomContext;

calculParser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, calculParser.RULE_atom);
    var _la = 0; // Token type
    try {
        this.state = 146;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case calculParser.INT:
        case calculParser.REAL:
            localctx = new NumberAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 140;
            _la = this._input.LA(1);
            if(!(_la===calculParser.INT || _la===calculParser.REAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case calculParser.VAR_NAME:
            localctx = new VarAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 141;
            this.match(calculParser.VAR_NAME);
            break;
        case calculParser.L_ROUND_BRACKET:
            localctx = new BracketsAtomContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 142;
            this.match(calculParser.L_ROUND_BRACKET);
            this.state = 143;
            this.expr(0);
            this.state = 144;
            this.match(calculParser.R_ROUND_BRACKET);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


calculParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 13:
			return this.expr_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

calculParser.prototype.expr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 6);
		case 1:
			return this.precpred(this._ctx, 5);
		case 2:
			return this.precpred(this._ctx, 4);
		case 3:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.calculParser = calculParser;
