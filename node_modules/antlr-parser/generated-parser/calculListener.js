// Generated from calcul.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');

// This class defines a complete listener for a parse tree produced by calculParser.
function calculListener() {
	antlr4.tree.ParseTreeListener.call(this);
	return this;
}

calculListener.prototype = Object.create(antlr4.tree.ParseTreeListener.prototype);
calculListener.prototype.constructor = calculListener;

// Enter a parse tree produced by calculParser#program.
calculListener.prototype.enterProgram = function(ctx) {
};

// Exit a parse tree produced by calculParser#program.
calculListener.prototype.exitProgram = function(ctx) {
};


// Enter a parse tree produced by calculParser#source.
calculListener.prototype.enterSource = function(ctx) {
};

// Exit a parse tree produced by calculParser#source.
calculListener.prototype.exitSource = function(ctx) {
};


// Enter a parse tree produced by calculParser#stat.
calculListener.prototype.enterStat = function(ctx) {
};

// Exit a parse tree produced by calculParser#stat.
calculListener.prototype.exitStat = function(ctx) {
};


// Enter a parse tree produced by calculParser#declVar.
calculListener.prototype.enterDeclVar = function(ctx) {
};

// Exit a parse tree produced by calculParser#declVar.
calculListener.prototype.exitDeclVar = function(ctx) {
};


// Enter a parse tree produced by calculParser#defineVar.
calculListener.prototype.enterDefineVar = function(ctx) {
};

// Exit a parse tree produced by calculParser#defineVar.
calculListener.prototype.exitDefineVar = function(ctx) {
};


// Enter a parse tree produced by calculParser#assignValue.
calculListener.prototype.enterAssignValue = function(ctx) {
};

// Exit a parse tree produced by calculParser#assignValue.
calculListener.prototype.exitAssignValue = function(ctx) {
};


// Enter a parse tree produced by calculParser#ifInstr.
calculListener.prototype.enterIfInstr = function(ctx) {
};

// Exit a parse tree produced by calculParser#ifInstr.
calculListener.prototype.exitIfInstr = function(ctx) {
};


// Enter a parse tree produced by calculParser#ifElseInstr.
calculListener.prototype.enterIfElseInstr = function(ctx) {
};

// Exit a parse tree produced by calculParser#ifElseInstr.
calculListener.prototype.exitIfElseInstr = function(ctx) {
};


// Enter a parse tree produced by calculParser#whileInstr.
calculListener.prototype.enterWhileInstr = function(ctx) {
};

// Exit a parse tree produced by calculParser#whileInstr.
calculListener.prototype.exitWhileInstr = function(ctx) {
};


// Enter a parse tree produced by calculParser#defineFunc.
calculListener.prototype.enterDefineFunc = function(ctx) {
};

// Exit a parse tree produced by calculParser#defineFunc.
calculListener.prototype.exitDefineFunc = function(ctx) {
};


// Enter a parse tree produced by calculParser#callFuncOrPrintVar.
calculListener.prototype.enterCallFuncOrPrintVar = function(ctx) {
};

// Exit a parse tree produced by calculParser#callFuncOrPrintVar.
calculListener.prototype.exitCallFuncOrPrintVar = function(ctx) {
};


// Enter a parse tree produced by calculParser#printExpr.
calculListener.prototype.enterPrintExpr = function(ctx) {
};

// Exit a parse tree produced by calculParser#printExpr.
calculListener.prototype.exitPrintExpr = function(ctx) {
};


// Enter a parse tree produced by calculParser#scope.
calculListener.prototype.enterScope = function(ctx) {
};

// Exit a parse tree produced by calculParser#scope.
calculListener.prototype.exitScope = function(ctx) {
};


// Enter a parse tree produced by calculParser#addExpr.
calculListener.prototype.enterAddExpr = function(ctx) {
};

// Exit a parse tree produced by calculParser#addExpr.
calculListener.prototype.exitAddExpr = function(ctx) {
};


// Enter a parse tree produced by calculParser#ifExpr.
calculListener.prototype.enterIfExpr = function(ctx) {
};

// Exit a parse tree produced by calculParser#ifExpr.
calculListener.prototype.exitIfExpr = function(ctx) {
};


// Enter a parse tree produced by calculParser#atomExpr.
calculListener.prototype.enterAtomExpr = function(ctx) {
};

// Exit a parse tree produced by calculParser#atomExpr.
calculListener.prototype.exitAtomExpr = function(ctx) {
};


// Enter a parse tree produced by calculParser#multiplyExpr.
calculListener.prototype.enterMultiplyExpr = function(ctx) {
};

// Exit a parse tree produced by calculParser#multiplyExpr.
calculListener.prototype.exitMultiplyExpr = function(ctx) {
};


// Enter a parse tree produced by calculParser#minusExpr.
calculListener.prototype.enterMinusExpr = function(ctx) {
};

// Exit a parse tree produced by calculParser#minusExpr.
calculListener.prototype.exitMinusExpr = function(ctx) {
};


// Enter a parse tree produced by calculParser#compareExpr.
calculListener.prototype.enterCompareExpr = function(ctx) {
};

// Exit a parse tree produced by calculParser#compareExpr.
calculListener.prototype.exitCompareExpr = function(ctx) {
};


// Enter a parse tree produced by calculParser#equalExpr.
calculListener.prototype.enterEqualExpr = function(ctx) {
};

// Exit a parse tree produced by calculParser#equalExpr.
calculListener.prototype.exitEqualExpr = function(ctx) {
};


// Enter a parse tree produced by calculParser#numberAtom.
calculListener.prototype.enterNumberAtom = function(ctx) {
};

// Exit a parse tree produced by calculParser#numberAtom.
calculListener.prototype.exitNumberAtom = function(ctx) {
};


// Enter a parse tree produced by calculParser#varAtom.
calculListener.prototype.enterVarAtom = function(ctx) {
};

// Exit a parse tree produced by calculParser#varAtom.
calculListener.prototype.exitVarAtom = function(ctx) {
};


// Enter a parse tree produced by calculParser#bracketsAtom.
calculListener.prototype.enterBracketsAtom = function(ctx) {
};

// Exit a parse tree produced by calculParser#bracketsAtom.
calculListener.prototype.exitBracketsAtom = function(ctx) {
};



exports.calculListener = calculListener;