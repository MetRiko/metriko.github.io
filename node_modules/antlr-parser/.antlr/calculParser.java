// Generated from d:\Dev\Projects\Studies\AntlrCompiler\AntlrJS\node_modules\antlr-parser\calcul.g4 by ANTLR 4.7.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class calculParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		EOS=1, WS=2, IF=3, THEN=4, ELSE=5, WHILE=6, FUNC=7, PLUS=8, MINUS=9, MULT=10, 
		DIV=11, LTEQ=12, GTEQ=13, LT=14, GT=15, EQ=16, NEQ=17, AND=18, OR=19, 
		NOT=20, ASSIGN=21, L_SCOPE_BRACKET=22, R_SCOPE_BRACKET=23, L_ROUND_BRACKET=24, 
		R_ROUND_BRACKET=25, PRINT=26, VAR=27, VAR_NAME=28, FUNC_NAME=29, INT=30, 
		REAL=31, COMMENT=32;
	public static final int
		RULE_program = 0, RULE_source = 1, RULE_stat = 2, RULE_declVar = 3, RULE_defineVar = 4, 
		RULE_assignValue = 5, RULE_ifInstr = 6, RULE_ifElseInstr = 7, RULE_whileInstr = 8, 
		RULE_defineFunc = 9, RULE_callFuncOrPrintVar = 10, RULE_printExpr = 11, 
		RULE_scope = 12, RULE_expr = 13, RULE_atom = 14;
	public static final String[] ruleNames = {
		"program", "source", "stat", "declVar", "defineVar", "assignValue", "ifInstr", 
		"ifElseInstr", "whileInstr", "defineFunc", "callFuncOrPrintVar", "printExpr", 
		"scope", "expr", "atom"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, "'if'", "'then'", "'else'", "'while'", "'func'", "'+'", 
		"'-'", "'*'", "'/'", "'<='", "'>='", "'<'", "'>'", "'=='", "'!='", "'and'", 
		"'or'", "'!'", "'='", "'{'", "'}'", "'('", "')'", "'print'", "'var'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "EOS", "WS", "IF", "THEN", "ELSE", "WHILE", "FUNC", "PLUS", "MINUS", 
		"MULT", "DIV", "LTEQ", "GTEQ", "LT", "GT", "EQ", "NEQ", "AND", "OR", "NOT", 
		"ASSIGN", "L_SCOPE_BRACKET", "R_SCOPE_BRACKET", "L_ROUND_BRACKET", "R_ROUND_BRACKET", 
		"PRINT", "VAR", "VAR_NAME", "FUNC_NAME", "INT", "REAL", "COMMENT"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "calcul.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public calculParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class ProgramContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(calculParser.EOF, 0); }
		public SourceContext source() {
			return getRuleContext(SourceContext.class,0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program; }
	}

	public final ProgramContext program() throws RecognitionException {
		ProgramContext _localctx = new ProgramContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(31);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOS) | (1L << IF) | (1L << WHILE) | (1L << FUNC) | (1L << MINUS) | (1L << L_SCOPE_BRACKET) | (1L << L_ROUND_BRACKET) | (1L << VAR) | (1L << VAR_NAME) | (1L << INT) | (1L << REAL))) != 0)) {
				{
				setState(30);
				source();
				}
			}

			setState(33);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourceContext extends ParserRuleContext {
		public List<StatContext> stat() {
			return getRuleContexts(StatContext.class);
		}
		public StatContext stat(int i) {
			return getRuleContext(StatContext.class,i);
		}
		public SourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_source; }
	}

	public final SourceContext source() throws RecognitionException {
		SourceContext _localctx = new SourceContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_source);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(36); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(35);
				stat();
				}
				}
				setState(38); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOS) | (1L << IF) | (1L << WHILE) | (1L << FUNC) | (1L << MINUS) | (1L << L_SCOPE_BRACKET) | (1L << L_ROUND_BRACKET) | (1L << VAR) | (1L << VAR_NAME) | (1L << INT) | (1L << REAL))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatContext extends ParserRuleContext {
		public DeclVarContext declVar() {
			return getRuleContext(DeclVarContext.class,0);
		}
		public DefineVarContext defineVar() {
			return getRuleContext(DefineVarContext.class,0);
		}
		public AssignValueContext assignValue() {
			return getRuleContext(AssignValueContext.class,0);
		}
		public ScopeContext scope() {
			return getRuleContext(ScopeContext.class,0);
		}
		public IfInstrContext ifInstr() {
			return getRuleContext(IfInstrContext.class,0);
		}
		public IfElseInstrContext ifElseInstr() {
			return getRuleContext(IfElseInstrContext.class,0);
		}
		public WhileInstrContext whileInstr() {
			return getRuleContext(WhileInstrContext.class,0);
		}
		public DefineFuncContext defineFunc() {
			return getRuleContext(DefineFuncContext.class,0);
		}
		public CallFuncOrPrintVarContext callFuncOrPrintVar() {
			return getRuleContext(CallFuncOrPrintVarContext.class,0);
		}
		public PrintExprContext printExpr() {
			return getRuleContext(PrintExprContext.class,0);
		}
		public TerminalNode EOS() { return getToken(calculParser.EOS, 0); }
		public StatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stat; }
	}

	public final StatContext stat() throws RecognitionException {
		StatContext _localctx = new StatContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_stat);
		try {
			setState(51);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(40);
				declVar();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(41);
				defineVar();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(42);
				assignValue();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(43);
				scope();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(44);
				ifInstr();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(45);
				ifElseInstr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(46);
				whileInstr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(47);
				defineFunc();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(48);
				callFuncOrPrintVar();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(49);
				printExpr();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(50);
				match(EOS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclVarContext extends ParserRuleContext {
		public TerminalNode VAR() { return getToken(calculParser.VAR, 0); }
		public TerminalNode VAR_NAME() { return getToken(calculParser.VAR_NAME, 0); }
		public TerminalNode EOS() { return getToken(calculParser.EOS, 0); }
		public DeclVarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declVar; }
	}

	public final DeclVarContext declVar() throws RecognitionException {
		DeclVarContext _localctx = new DeclVarContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_declVar);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(53);
			match(VAR);
			setState(54);
			match(VAR_NAME);
			setState(55);
			match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefineVarContext extends ParserRuleContext {
		public TerminalNode VAR() { return getToken(calculParser.VAR, 0); }
		public TerminalNode VAR_NAME() { return getToken(calculParser.VAR_NAME, 0); }
		public TerminalNode ASSIGN() { return getToken(calculParser.ASSIGN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EOS() { return getToken(calculParser.EOS, 0); }
		public DefineVarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defineVar; }
	}

	public final DefineVarContext defineVar() throws RecognitionException {
		DefineVarContext _localctx = new DefineVarContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_defineVar);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(57);
			match(VAR);
			setState(58);
			match(VAR_NAME);
			setState(59);
			match(ASSIGN);
			setState(60);
			expr(0);
			setState(61);
			match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignValueContext extends ParserRuleContext {
		public TerminalNode VAR_NAME() { return getToken(calculParser.VAR_NAME, 0); }
		public TerminalNode ASSIGN() { return getToken(calculParser.ASSIGN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EOS() { return getToken(calculParser.EOS, 0); }
		public AssignValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignValue; }
	}

	public final AssignValueContext assignValue() throws RecognitionException {
		AssignValueContext _localctx = new AssignValueContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_assignValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(63);
			match(VAR_NAME);
			setState(64);
			match(ASSIGN);
			setState(65);
			expr(0);
			setState(66);
			match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfInstrContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(calculParser.IF, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ScopeContext scope() {
			return getRuleContext(ScopeContext.class,0);
		}
		public IfInstrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifInstr; }
	}

	public final IfInstrContext ifInstr() throws RecognitionException {
		IfInstrContext _localctx = new IfInstrContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_ifInstr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(68);
			match(IF);
			setState(69);
			expr(0);
			setState(70);
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfElseInstrContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(calculParser.IF, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<ScopeContext> scope() {
			return getRuleContexts(ScopeContext.class);
		}
		public ScopeContext scope(int i) {
			return getRuleContext(ScopeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(calculParser.ELSE, 0); }
		public IfElseInstrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifElseInstr; }
	}

	public final IfElseInstrContext ifElseInstr() throws RecognitionException {
		IfElseInstrContext _localctx = new IfElseInstrContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_ifElseInstr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(72);
			match(IF);
			setState(73);
			expr(0);
			setState(74);
			scope();
			setState(75);
			match(ELSE);
			setState(76);
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileInstrContext extends ParserRuleContext {
		public TerminalNode WHILE() { return getToken(calculParser.WHILE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ScopeContext scope() {
			return getRuleContext(ScopeContext.class,0);
		}
		public WhileInstrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileInstr; }
	}

	public final WhileInstrContext whileInstr() throws RecognitionException {
		WhileInstrContext _localctx = new WhileInstrContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_whileInstr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(78);
			match(WHILE);
			setState(79);
			expr(0);
			setState(80);
			scope();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefineFuncContext extends ParserRuleContext {
		public TerminalNode FUNC() { return getToken(calculParser.FUNC, 0); }
		public TerminalNode VAR_NAME() { return getToken(calculParser.VAR_NAME, 0); }
		public TerminalNode L_SCOPE_BRACKET() { return getToken(calculParser.L_SCOPE_BRACKET, 0); }
		public TerminalNode R_SCOPE_BRACKET() { return getToken(calculParser.R_SCOPE_BRACKET, 0); }
		public TerminalNode EOS() { return getToken(calculParser.EOS, 0); }
		public List<StatContext> stat() {
			return getRuleContexts(StatContext.class);
		}
		public StatContext stat(int i) {
			return getRuleContext(StatContext.class,i);
		}
		public DefineFuncContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defineFunc; }
	}

	public final DefineFuncContext defineFunc() throws RecognitionException {
		DefineFuncContext _localctx = new DefineFuncContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_defineFunc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(82);
			match(FUNC);
			setState(83);
			match(VAR_NAME);
			setState(84);
			match(L_SCOPE_BRACKET);
			setState(88);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOS) | (1L << IF) | (1L << WHILE) | (1L << FUNC) | (1L << MINUS) | (1L << L_SCOPE_BRACKET) | (1L << L_ROUND_BRACKET) | (1L << VAR) | (1L << VAR_NAME) | (1L << INT) | (1L << REAL))) != 0)) {
				{
				{
				setState(85);
				stat();
				}
				}
				setState(90);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(91);
			match(R_SCOPE_BRACKET);
			setState(92);
			match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallFuncOrPrintVarContext extends ParserRuleContext {
		public TerminalNode VAR_NAME() { return getToken(calculParser.VAR_NAME, 0); }
		public TerminalNode EOS() { return getToken(calculParser.EOS, 0); }
		public CallFuncOrPrintVarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callFuncOrPrintVar; }
	}

	public final CallFuncOrPrintVarContext callFuncOrPrintVar() throws RecognitionException {
		CallFuncOrPrintVarContext _localctx = new CallFuncOrPrintVarContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_callFuncOrPrintVar);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(94);
			match(VAR_NAME);
			setState(95);
			match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrintExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EOS() { return getToken(calculParser.EOS, 0); }
		public PrintExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_printExpr; }
	}

	public final PrintExprContext printExpr() throws RecognitionException {
		PrintExprContext _localctx = new PrintExprContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_printExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(97);
			expr(0);
			setState(98);
			match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScopeContext extends ParserRuleContext {
		public TerminalNode L_SCOPE_BRACKET() { return getToken(calculParser.L_SCOPE_BRACKET, 0); }
		public TerminalNode R_SCOPE_BRACKET() { return getToken(calculParser.R_SCOPE_BRACKET, 0); }
		public TerminalNode EOS() { return getToken(calculParser.EOS, 0); }
		public List<StatContext> stat() {
			return getRuleContexts(StatContext.class);
		}
		public StatContext stat(int i) {
			return getRuleContext(StatContext.class,i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scope; }
	}

	public final ScopeContext scope() throws RecognitionException {
		ScopeContext _localctx = new ScopeContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_scope);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(100);
			match(L_SCOPE_BRACKET);
			setState(104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOS) | (1L << IF) | (1L << WHILE) | (1L << FUNC) | (1L << MINUS) | (1L << L_SCOPE_BRACKET) | (1L << L_ROUND_BRACKET) | (1L << VAR) | (1L << VAR_NAME) | (1L << INT) | (1L << REAL))) != 0)) {
				{
				{
				setState(101);
				stat();
				}
				}
				setState(106);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(107);
			match(R_SCOPE_BRACKET);
			setState(108);
			match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
	 
		public ExprContext() { }
		public void copyFrom(ExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AddExprContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode PLUS() { return getToken(calculParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(calculParser.MINUS, 0); }
		public AddExprContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class IfExprContext extends ExprContext {
		public TerminalNode IF() { return getToken(calculParser.IF, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(calculParser.THEN, 0); }
		public TerminalNode ELSE() { return getToken(calculParser.ELSE, 0); }
		public IfExprContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class AtomExprContext extends ExprContext {
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public AtomExprContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class MultiplyExprContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode MULT() { return getToken(calculParser.MULT, 0); }
		public TerminalNode DIV() { return getToken(calculParser.DIV, 0); }
		public MultiplyExprContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class MinusExprContext extends ExprContext {
		public TerminalNode MINUS() { return getToken(calculParser.MINUS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public MinusExprContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class CompareExprContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LTEQ() { return getToken(calculParser.LTEQ, 0); }
		public TerminalNode GTEQ() { return getToken(calculParser.GTEQ, 0); }
		public TerminalNode LT() { return getToken(calculParser.LT, 0); }
		public TerminalNode GT() { return getToken(calculParser.GT, 0); }
		public CompareExprContext(ExprContext ctx) { copyFrom(ctx); }
	}
	public static class EqualExprContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode EQ() { return getToken(calculParser.EQ, 0); }
		public TerminalNode NEQ() { return getToken(calculParser.NEQ, 0); }
		public EqualExprContext(ExprContext ctx) { copyFrom(ctx); }
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 26;
		enterRecursionRule(_localctx, 26, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(121);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MINUS:
				{
				_localctx = new MinusExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(111);
				match(MINUS);
				setState(112);
				expr(7);
				}
				break;
			case IF:
				{
				_localctx = new IfExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(113);
				match(IF);
				setState(114);
				expr(0);
				setState(115);
				match(THEN);
				setState(116);
				expr(0);
				setState(117);
				match(ELSE);
				setState(118);
				expr(2);
				}
				break;
			case L_ROUND_BRACKET:
			case VAR_NAME:
			case INT:
			case REAL:
				{
				_localctx = new AtomExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(120);
				atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(137);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(135);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplyExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(123);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(124);
						((MultiplyExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
							((MultiplyExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(125);
						expr(7);
						}
						break;
					case 2:
						{
						_localctx = new AddExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(126);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(127);
						((AddExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AddExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(128);
						expr(6);
						}
						break;
					case 3:
						{
						_localctx = new CompareExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(129);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(130);
						((CompareExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LTEQ) | (1L << GTEQ) | (1L << LT) | (1L << GT))) != 0)) ) {
							((CompareExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(131);
						expr(5);
						}
						break;
					case 4:
						{
						_localctx = new EqualExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(132);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(133);
						((EqualExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==EQ || _la==NEQ) ) {
							((EqualExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(134);
						expr(4);
						}
						break;
					}
					} 
				}
				setState(139);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,7,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
	 
		public AtomContext() { }
		public void copyFrom(AtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class BracketsAtomContext extends AtomContext {
		public TerminalNode L_ROUND_BRACKET() { return getToken(calculParser.L_ROUND_BRACKET, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode R_ROUND_BRACKET() { return getToken(calculParser.R_ROUND_BRACKET, 0); }
		public BracketsAtomContext(AtomContext ctx) { copyFrom(ctx); }
	}
	public static class VarAtomContext extends AtomContext {
		public TerminalNode VAR_NAME() { return getToken(calculParser.VAR_NAME, 0); }
		public VarAtomContext(AtomContext ctx) { copyFrom(ctx); }
	}
	public static class NumberAtomContext extends AtomContext {
		public TerminalNode INT() { return getToken(calculParser.INT, 0); }
		public TerminalNode REAL() { return getToken(calculParser.REAL, 0); }
		public NumberAtomContext(AtomContext ctx) { copyFrom(ctx); }
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_atom);
		int _la;
		try {
			setState(146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT:
			case REAL:
				_localctx = new NumberAtomContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(140);
				_la = _input.LA(1);
				if ( !(_la==INT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case VAR_NAME:
				_localctx = new VarAtomContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(141);
				match(VAR_NAME);
				}
				break;
			case L_ROUND_BRACKET:
				_localctx = new BracketsAtomContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(142);
				match(L_ROUND_BRACKET);
				setState(143);
				expr(0);
				setState(144);
				match(R_ROUND_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13:
			return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 6);
		case 1:
			return precpred(_ctx, 5);
		case 2:
			return precpred(_ctx, 4);
		case 3:
			return precpred(_ctx, 3);
		}
		return true;
	}

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\"\u0097\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\3\2\5\2\"\n\2\3\2\3"+
		"\2\3\3\6\3\'\n\3\r\3\16\3(\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\5\4\66\n\4\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3"+
		"\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\13\3\13\3"+
		"\13\3\13\7\13Y\n\13\f\13\16\13\\\13\13\3\13\3\13\3\13\3\f\3\f\3\f\3\r"+
		"\3\r\3\r\3\16\3\16\7\16i\n\16\f\16\16\16l\13\16\3\16\3\16\3\16\3\17\3"+
		"\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17|\n\17\3\17\3\17"+
		"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u008a\n\17\f\17"+
		"\16\17\u008d\13\17\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0095\n\20\3\20"+
		"\2\3\34\21\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36\2\7\3\2\f\r\3\2\n\13"+
		"\3\2\16\21\3\2\22\23\3\2 !\2\u009d\2!\3\2\2\2\4&\3\2\2\2\6\65\3\2\2\2"+
		"\b\67\3\2\2\2\n;\3\2\2\2\fA\3\2\2\2\16F\3\2\2\2\20J\3\2\2\2\22P\3\2\2"+
		"\2\24T\3\2\2\2\26`\3\2\2\2\30c\3\2\2\2\32f\3\2\2\2\34{\3\2\2\2\36\u0094"+
		"\3\2\2\2 \"\5\4\3\2! \3\2\2\2!\"\3\2\2\2\"#\3\2\2\2#$\7\2\2\3$\3\3\2\2"+
		"\2%\'\5\6\4\2&%\3\2\2\2\'(\3\2\2\2(&\3\2\2\2()\3\2\2\2)\5\3\2\2\2*\66"+
		"\5\b\5\2+\66\5\n\6\2,\66\5\f\7\2-\66\5\32\16\2.\66\5\16\b\2/\66\5\20\t"+
		"\2\60\66\5\22\n\2\61\66\5\24\13\2\62\66\5\26\f\2\63\66\5\30\r\2\64\66"+
		"\7\3\2\2\65*\3\2\2\2\65+\3\2\2\2\65,\3\2\2\2\65-\3\2\2\2\65.\3\2\2\2\65"+
		"/\3\2\2\2\65\60\3\2\2\2\65\61\3\2\2\2\65\62\3\2\2\2\65\63\3\2\2\2\65\64"+
		"\3\2\2\2\66\7\3\2\2\2\678\7\35\2\289\7\36\2\29:\7\3\2\2:\t\3\2\2\2;<\7"+
		"\35\2\2<=\7\36\2\2=>\7\27\2\2>?\5\34\17\2?@\7\3\2\2@\13\3\2\2\2AB\7\36"+
		"\2\2BC\7\27\2\2CD\5\34\17\2DE\7\3\2\2E\r\3\2\2\2FG\7\5\2\2GH\5\34\17\2"+
		"HI\5\32\16\2I\17\3\2\2\2JK\7\5\2\2KL\5\34\17\2LM\5\32\16\2MN\7\7\2\2N"+
		"O\5\32\16\2O\21\3\2\2\2PQ\7\b\2\2QR\5\34\17\2RS\5\32\16\2S\23\3\2\2\2"+
		"TU\7\t\2\2UV\7\36\2\2VZ\7\30\2\2WY\5\6\4\2XW\3\2\2\2Y\\\3\2\2\2ZX\3\2"+
		"\2\2Z[\3\2\2\2[]\3\2\2\2\\Z\3\2\2\2]^\7\31\2\2^_\7\3\2\2_\25\3\2\2\2`"+
		"a\7\36\2\2ab\7\3\2\2b\27\3\2\2\2cd\5\34\17\2de\7\3\2\2e\31\3\2\2\2fj\7"+
		"\30\2\2gi\5\6\4\2hg\3\2\2\2il\3\2\2\2jh\3\2\2\2jk\3\2\2\2km\3\2\2\2lj"+
		"\3\2\2\2mn\7\31\2\2no\7\3\2\2o\33\3\2\2\2pq\b\17\1\2qr\7\13\2\2r|\5\34"+
		"\17\tst\7\5\2\2tu\5\34\17\2uv\7\6\2\2vw\5\34\17\2wx\7\7\2\2xy\5\34\17"+
		"\4y|\3\2\2\2z|\5\36\20\2{p\3\2\2\2{s\3\2\2\2{z\3\2\2\2|\u008b\3\2\2\2"+
		"}~\f\b\2\2~\177\t\2\2\2\177\u008a\5\34\17\t\u0080\u0081\f\7\2\2\u0081"+
		"\u0082\t\3\2\2\u0082\u008a\5\34\17\b\u0083\u0084\f\6\2\2\u0084\u0085\t"+
		"\4\2\2\u0085\u008a\5\34\17\7\u0086\u0087\f\5\2\2\u0087\u0088\t\5\2\2\u0088"+
		"\u008a\5\34\17\6\u0089}\3\2\2\2\u0089\u0080\3\2\2\2\u0089\u0083\3\2\2"+
		"\2\u0089\u0086\3\2\2\2\u008a\u008d\3\2\2\2\u008b\u0089\3\2\2\2\u008b\u008c"+
		"\3\2\2\2\u008c\35\3\2\2\2\u008d\u008b\3\2\2\2\u008e\u0095\t\6\2\2\u008f"+
		"\u0095\7\36\2\2\u0090\u0091\7\32\2\2\u0091\u0092\5\34\17\2\u0092\u0093"+
		"\7\33\2\2\u0093\u0095\3\2\2\2\u0094\u008e\3\2\2\2\u0094\u008f\3\2\2\2"+
		"\u0094\u0090\3\2\2\2\u0095\37\3\2\2\2\13!(\65Zj{\u0089\u008b\u0094";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}