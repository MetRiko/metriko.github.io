grammar calcul;

/* PARSER */

program:
    source? EOF;

source:
    stat+;

stat:
    assignStat 
    | printStat
    | EOS;

assignStat:
    VAR ASSIGN expr EOS;

printStat:
    PRINT expr EOS;

expr:
    MINUS expr                      #unaryMinusExpr
    | expr op=(MULT | DIV) expr     #multiplyExpr
    | expr op=(PLUS | MINUS) expr   #addExpr
    | atom                          #atomExpr
    ;

atom: 
    (INT | REAL)                            #numberAtom
    | VAR                                   #varAtom
    | L_ROUND_BRACKET expr R_ROUND_BRACKET  #bracketsAtom
    ;

/* LEXER */

EOS : [\n];
WS : [ \t\r\n] -> skip;

PLUS : '+';
MINUS : '-';
MULT : '*';
DIV : '/';

ASSIGN : '=';
L_ROUND_BRACKET : '(';
R_ROUND_BRACKET : ')';

PRINT : 'print';

VAR : [a-zA-Z_] [a-zA-Z_0-9]*;

INT : [0-9]+;

REAL : [0-9]+ '.' [0-9]* | '.' [0-9]+;

COMMENT : '/' '/' ~[\r\n]* -> skip;
